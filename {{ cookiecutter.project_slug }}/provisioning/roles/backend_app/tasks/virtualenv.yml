---
{% raw %}
- name: Set backend_app_virtualenv_dir fact
  ansible.builtin.set_fact:
    backend_app_virtualenv_dir: "{{ backend_app_deploy_helper.new_release_path }}/venv"

- name: Install python packages and build dependencies
  become: true
  ansible.builtin.apt:
    name:
      - libpq-dev
      - python3-dev
      - python3-venv
      - python3-pip
      - watchman
    state: present

- name: Set up virtualenv in new release path
  become: true
  become_user: "{{ backend_app_user }}"
  ansible.builtin.pip:
    virtualenv: "{{ backend_app_virtualenv_dir }}"
    virtualenv_command: /usr/bin/python3.10 -m venv
    name:
      - pip==22.3.1
      - pip-tools==6.12.1
      - setuptools==66.1.1
      - wheel==0.38.4

- name: Install requirements using pip-sync
  become: true
  become_user: "{{ backend_app_user }}"
  # Use legacy pip resolver, work around issue https://github.com/pypa/pip/issues/9243
  # where the new resolver may try to install a sub-dependency version that differs
  # from the pinned version in requirements.txt
  ansible.builtin.command: "{{ backend_app_virtualenv_dir }}/bin/pip-sync --pip-args='--use-deprecated=legacy-resolver'"
  args:
    chdir: "{{ backend_app_deploy_helper.new_release_path }}"
  changed_when: true

- name: Add .venvrc file that can be used to activate the virtualenv
  become: true
  become_user: "{{ backend_app_user }}"
  ansible.builtin.template:
    src: venvrc.j2
    dest: "~/.venvrc"
    mode: "u=rw,g=,o="

- name: Update .bashrc file to source .venvrc file
  become: true
  become_user: "{{ backend_app_user }}"
  ansible.builtin.blockinfile:
    path: "~/.bashrc"
    block: |
      . ~/.venvrc
{% endraw -%}
