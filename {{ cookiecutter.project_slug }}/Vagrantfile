# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.require_version ">= 2.2.5"

if Vagrant::Util::Platform.windows? then
  def running_as_admin?
    # query the LOCAL SERVICE account reg key (requires admin privileges)
    system('reg query "HKU\S-1-5-19"', :out => File::NULL)
  end

  unless running_as_admin?
    puts "Admin rights are required to create symlinks. Try running this Vagrantfile again from an admin command prompt."
    exit 1
  end
end

Vagrant.configure("2") do |config|

  config.vagrant.plugins = {
    "vagrant-proxyconf" => {"version" => ">=2.0.10"},
    "vagrant-vbguest" => {"version" => ">=0.24.0"},
  }

  # Prefer using the VirtualBox provider over Docker if both are available
  # https://www.vagrantup.com/docs/providers/basic_usage#default-provider
  config.vm.provider "virtualbox"
  config.vm.provider "docker"

  # If we're using VirtualBox as the provider, apply the following config for all VMs
  config.vm.provider :virtualbox do |virtualbox, override|
    override.vm.box = "ubuntu/focal64"
    override.vbguest.auto_update = false
    # There seems to be a VirtualBox bug where the VirtualBox processes on the host machine
    # can get stuck at 100% after resuming from sleep on macOS hosts, even when the guest
    # machines are idle. We disable audio devices on all VMs as a workaround.
    # See https://www.virtualbox.org/ticket/18089
    virtualbox.customize ["modifyvm", :id, "--audio", "none"]
  end

  # If we're using Docker as the provider, apply the following config for all containers
  config.vm.provider :docker do |docker, override|
    docker.image = "{{ cookiecutter.project_slug}}_base_image"
    docker.remains_running = true
    docker.has_ssh = true
    docker.create_args = [
      '--mount', 'type=tmpfs,destination=/run',
      '--mount', 'type=tmpfs,destination=/run/lock',
      '--cap-add=NET_ADMIN'
    ]
    docker.volumes = [
      '/sys/fs/cgroup:/sys/fs/cgroup:ro'
    ]
  end

  # Allow connections from the 'vagrant_ansible_key' on all Vagrant VMs. We'll
  # be using this key to make ssh connections when running Ansible to provision
  # the Vagrant dev environment (see the 'ansible_local' configuration).
  config.vm.provision "shell" do |shell|
    vagrant_ansible_key_pub = File.readlines("vagrant_ansible_key/id_rsa.pub").first.strip
    shell.name = "add custom vagrant ansible key to authorized keys"
    shell.privileged = false
    shell.inline = <<-SCRIPT
      if ! echo /home/vagrant/.ssh/authorized_keys | grep -q "vagrant ansible key"; then
        echo #{vagrant_ansible_key_pub} >> /home/vagrant/.ssh/authorized_keys
      fi
    SCRIPT
  end

  config.apt_proxy.http = "{{ cookiecutter.vagrant_apt_proxy }}"
  config.proxy.http = "{{ cookiecutter.vagrant_http_proxy }}"
  config.proxy.https = "{{ cookiecutter.vagrant_https_proxy }}"

  config.vm.define "backend", primary: true do |machine|
    machine.vm.network "private_network", ip: "172.18.177.20"
    # Forward the https port being served via nginx
    machine.vm.network "forwarded_port", guest: 443, host: 4000
    # Forward the a port that can be used when running the django dev server
    machine.vm.network "forwarded_port", guest: 4001, host: 4001
    # Enables X11 forwarding. This can be useful when running Selenium tests
    # since you can see exactly what's happening in the browser during the tests.
    # This requires an X11 server on your host machine, see https://www.xquartz.org
    # for Mac hosts or http://x.cygwin.com for Windows hosts.
    machine.ssh.forward_x11 = true
    machine.vm.synced_folder(
      "./backend_app",
      "/opt/{{ cookiecutter.project_slug }}_backend/current",
    )

    machine.vm.provider :virtualbox do |virtualbox|
      virtualbox.memory = 1024
      virtualbox.cpus = 1
    end

  end

  config.vm.define "frontend" do |machine|
    machine.vm.network "private_network", ip: "172.18.177.21"
    # Forward the https port being served via nginx
    machine.vm.network "forwarded_port", guest: 443, host: 5000

    machine.vm.provider :virtualbox do |virtualbox|
      virtualbox.memory = 512
    end
  end

  config.vm.define "db" do |machine|
    machine.vm.network "private_network", ip: "172.18.177.22"

    machine.vm.provider :virtualbox do |virtualbox|
      virtualbox.memory = 512
    end
  end

  # We spin up another VM and execute ansible using the ansible_local vagrant
  # provisioner, as opposed to executing ansible directly from the host machine.
  #
  # This helps simplify the initial setup process, creates a consistent
  # provisioning environment and allows us to provision a dev environment on
  # host machines where Ansible is not supported, such as Windows.
  # (see https://docs.ansible.com/ansible/latest/user_guide/windows_faq.html#can-ansible-run-on-windows )
  #
  # However, this process does result in the creation of a 'provisioner' VM,
  # which increases the system resources used for this dev environment.
  config.vm.define "provisioner" do |machine|
    machine.vm.network "private_network", ip: "172.18.177.23"
    # Forward a port that can be used if starting the frontend dev server
    machine.vm.network "forwarded_port", guest: 5001, host: 5001
    # Mount the folder containing the dev vm ssh keys with explicit file
    # permissions. This addresses 'unprotected private key file' errors on
    # Windows, due to mounts on Windows having 777 file permissions by default.
    machine.vm.synced_folder(
      "./vagrant_ansible_key",
      "/vagrant_ansible_key",
      mount_options: ["fmode=600"]
    )

    machine.vm.provider :virtualbox do |virtualbox|
      virtualbox.memory = 1024
    end

    machine.vm.provision "shell" do |shell|
      shell.name = "ansible setup"
      shell.privileged = false
      # install ansible requirements
      shell.inline = <<-SCRIPT
        sudo apt-get update
        sudo apt-get install -y curl rsync python3 python3-venv python3-pip python3-apt libssl-dev
        python3.8 -m venv ~/provision_venv --system-site-packages
        source ~/provision_venv/bin/activate
        pip install pip==20.3.3 wheel==0.36.2
        pip install -r /vagrant/provisioning/requirements.txt
      SCRIPT
    end

    # See https://www.vagrantup.com/docs/provisioning/ansible_local.html and
    # https://www.vagrantup.com/docs/provisioning/ansible_common.html
    machine.vm.provision "ansible_local" do |ansible|
      ansible.compatibility_mode = "2.0"
      ansible.playbook = "playbook.yml"
      ansible.playbook_command = "~/provision_venv/bin/ansible-playbook"
      ansible.provisioning_path = "/vagrant/provisioning"
      ansible.config_file = "ansible-vagrant.cfg"
      ansible.raw_arguments = ["--private-key=/vagrant_ansible_key/id_rsa"]
      ansible.install = false # we do this in the above inline setup script
      ansible.galaxy_role_file = "requirements.yml"
      ansible.galaxy_command = " ~/provision_venv/bin/ansible-galaxy install --role-file=%{role_file}"
      ansible.verbose = false
      ansible.limit = "all,localhost"
      ansible.inventory_path = "environments/dev/inventory"
      ansible.tags = ENV["VAGRANT_ANSIBLE_TAGS"] || "all"
    end
  end

end
